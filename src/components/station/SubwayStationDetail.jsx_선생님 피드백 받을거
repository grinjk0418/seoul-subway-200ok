// src/pages/SubwayStationDetail.jsx
import { useParams } from 'react-router-dom';
import './SubwayStationDetail.css';
import { useDispatch, useSelector } from 'react-redux';
import { useEffect } from 'react';
import { setSubwayInfo } from '../../store/slices/subwayStationDetailSlice.js';
import { subwayStationIndex } from '../../store/thunks/subwayStationListThunk.js';
import { realtimeArrivalsIndex, firstLastTimesIndex } from '../../store/thunks/subwayStationDetailThunk.js';

// 역ID → 역명 사전 [{ statnId, statnNm }]
import stationCatalog from '../../data/stationNameDict.js';

// 상행,내선:1, 하행,외선:2 로 바꾸기
function updnFrom(txt) {
  const s = String(txt);
  if (s.includes('상') || s.includes('내')) {
    return 1; // 상행/내선
  } else if (s.includes('하') || s.includes('외')) {
    return 2; // 하행/외선
  } else {
    return undefined;
  }
}

// 평일:1, 토요일:2, 휴일/일요일:3 로 바꾸기
function dayCode() {
  const d = new Date().getDay(); // 0=일, 6=토
  if (d === 0) return 3;  // 휴일/일요일
  if (d === 6) return 2;  // 토요일
  return 1;               // 평일
}



/* ====================== 컴포넌트 ====================== */
function SubwayStationDetail() {
  const { stationId } = useParams();
  const dispatch = useDispatch();

  const subwayList  = useSelector(state => state.subwayStation.subwayList);
  const subwayInfo  = useSelector(state => state.subwayStationDetail.subwayInfo);
  const realtimeArrivalList = useSelector(state => state.subwayStationDetail.realtimeArrivalList);
  const firstLastTimes   = useSelector(state => state.subwayStationDetail.firstLastTimes);

  useEffect(() => {
    // 역리스트 없으면 호출하기
    if (!subwayList?.length) {
      dispatch(subwayStationIndex());
    }

    // 세그먼트 파라미터(전철역코드)랑 일치하는 역정보 스테이트에 저장 
    const item = subwayList?.find((item) => stationId === item.STATION_CD);
    dispatch(setSubwayInfo(item));

    // 도착 정보 획득 할때 현재 호선을 아규먼트로 전달
    dispatch(realtimeArrivalsIndex(subwayInfo?.STATION_NM));
    console.log(realtimeArrivalList);



    const lineNum = subwayInfo?.LINE_NUM.replace(/^0+/,''); // "01호선" -> "1호선"
    const day = dayCode();                          // 평일=1, 토=2, 휴일/일=3
    const stationCd = subwayInfo.STATION_CD;  // 전철역 코드

    // 첫차,막차 정보 획득
    dispatch(firstLastTimesIndex(subwayInfo?.LINE_NUM, '상/하행', '요일', subwayInfo?.STATION_CD));
    console.log(firstLastTimes);

  }, [subwayList?.length]);

  return (
    <div className="subway-station-detail-scope">
      <div className="detail-stage">
        <div className="detail-root">
          <div className="detail-switch">
            <div className="detail-switch-center">
              {subwayInfo?.LINE_NUM && (
                <span className="detail-switch-linebadge">
                  {`${subwayInfo?.LINE_NUM.replace(/^0+/,'')}`}
                </span>
              )}
              <span className="detail-switch-current">
                {subwayInfo?.STATION_NM || '역 이름 불러오는 중…'}
              </span>
            </div>
          </div>

          <div className="detail-two-col">
            <section className="detail-section">
              <div>-방면</div>
              <div className="detail-card">
                <div>-행 -후 도착</div>
                <div>-행 -후 도착</div>
                <div className="detail-row"><h4>첫차</h4><p>몇시 몇분</p></div>
                <div className="detail-row"><h4>막차</h4><p>몇시 몇분</p></div>
              </div>
            </section>

            <section className="detail-section">
              <div>-방면</div>
              <div className="detail-card">
                <div>-행 -후 도착</div>
                <div>-행 -후 도착</div>
                <div className="detail-row"><h4>첫차</h4><p>몇시 몇분</p></div>
                <div className="detail-row"><h4>막차</h4><p>몇시 몇분</p></div>
              </div>
            </section>
          </div>
        </div>
      </div>
    </div>
  );
}

export default SubwayStationDetail;
